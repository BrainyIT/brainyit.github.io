{"version":3,"sources":["ChartsAmCharts/MapChart.js","ChartsAmCharts/AngularChart.js","ChartsAmCharts/PolarChart.js","ChartsAmCharts/index.js","App.js","serviceWorker.js","index.js"],"names":["MapChart","useEffect","fetch","then","res","json","resJSON","geoJSON","topojson","objects","features","map","feature","id","properties","CD_UF","randomData","name","NM_UF","value","Math","floor","random","am4core","am4themes_animated","chart","am4maps","geodata","projection","Miller","exporting","menu","title","titles","create","text","fontSize","marginTop","marginBottom","brazilSeries","series","push","brazilPolygonTemplate","mapPolygons","template","tooltipText","fill","colors","getIndex","nonScalingStroke","heatRules","property","target","min","brighten","max","events","on","e","console","log","dataItem","dataContext","states","heatLegend","createChild","align","width","marginRight","minValue","maxValue","valign","minRange","valueAxis","axisRanges","label","maxRange","renderer","labels","adapter","add","labelText","ev","isNaN","hideTooltip","showTooltipAt","style","display","alignSelf","margin","padding","height","backgroundColor","AngularChart","am4charts","hiddenState","opacity","innerRadius","axis","xAxes","strictMinMax","grid","stroke","getFor","strokeOpacity","colorSet","range0","endValue","axisFill","fillOpacity","zIndex","range1","range2","hands","showValue","cubicOut","className","PolarChart","data","categoryAxis","dataFields","category","yAxes","range","endCategory","range3","locations","valueY","categoryX","strokeWidth","ChartsAmCharts","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71d72a45.chunk.js","sourcesContent":["/* Imports */\r\nimport React from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { useEffect } from \"react\";\r\nimport * as topojson from 'topojson-client'\r\n\r\nconst MapChart = () => {\r\n\r\n  useEffect(() => {\r\n    fetch('./maps/BR_UF_2019.json')\r\n      .then(res => res.json())\r\n      .then(resJSON => {\r\n\r\n        const geoJSON = topojson.feature(\r\n          resJSON,\r\n          resJSON.objects['BR_UF_2019']\r\n        )\r\n\r\n        geoJSON.features.map(feature => {\r\n          feature.id = feature.properties.CD_UF\r\n          return feature\r\n        })\r\n\r\n        const randomData = geoJSON.features.map(feature => {\r\n          feature.properties.name = feature.properties.NM_UF\r\n          feature.properties.value = Math.floor((Math.random() * 7) + 1)\r\n          return feature\r\n        })\r\n\r\n        am4core.useTheme(am4themes_animated);\r\n        let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n        chart.geodata = geoJSON\r\n        chart.projection = new am4maps.projections.Miller();\r\n        chart.exporting.menu = new am4core.ExportMenu();\r\n        \r\n        let title = chart.titles.create();\r\n        title.text = \"NÃ­vel de Maturidade por U.F.\";\r\n        title.fontSize = 15;\r\n        title.marginTop = 15\r\n        title.marginBottom = 25\r\n\r\n        let brazilSeries = chart.series.push(new am4maps.MapPolygonSeries(randomData));\r\n        brazilSeries.geodata = geoJSON;\r\n\r\n        let brazilPolygonTemplate = brazilSeries.mapPolygons.template;\r\n        brazilPolygonTemplate.tooltipText = \"{name} - Nota {value}\";\r\n        brazilPolygonTemplate.fill = chart.colors.getIndex(1);\r\n        brazilPolygonTemplate.nonScalingStroke = true;\r\n\r\n        brazilSeries.heatRules.push({\r\n          property: \"fill\",\r\n          target: brazilPolygonTemplate,\r\n          min: chart.colors.getIndex(1).brighten(1),\r\n          max: chart.colors.getIndex(1).brighten(-0.5)\r\n        });\r\n\r\n        brazilPolygonTemplate.events.on(\"hit\", e => {\r\n          console.log(e.target.dataItem.dataContext.name);\r\n          console.log(e.target.dataItem.dataContext.value);\r\n        })\r\n\r\n        let hs = brazilPolygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = am4core.color(\"#367B25\");\r\n\r\n        let heatLegend = chart.createChild(am4maps.HeatLegend);\r\n            heatLegend.series = brazilSeries;\r\n            heatLegend.align = \"right\";\r\n            heatLegend.width = am4core.percent(25);\r\n            heatLegend.marginRight = am4core.percent(4);\r\n            heatLegend.marginBottom = am4core.percent(10)\r\n            heatLegend.minValue = 1;\r\n            heatLegend.maxValue = 7;\r\n            heatLegend.valign = \"bottom\";\r\n\r\n        // Set up custom heat map legend labels using axis ranges\r\n        let minRange = heatLegend.valueAxis.axisRanges.create();\r\n        minRange.value = heatLegend.minValue;\r\n        minRange.label.text = \"Baixo\";\r\n        let maxRange = heatLegend.valueAxis.axisRanges.create();\r\n        maxRange.value = heatLegend.maxValue;\r\n        maxRange.label.text = \"Alto\";\r\n\r\n        heatLegend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(labelText) {\r\n          return \"\";\r\n        });\r\n\r\n        brazilPolygonTemplate.events.on(\"over\", function(ev) {\r\n          if (!isNaN(ev.target.dataItem.value)) {\r\n            heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n          }\r\n          else {\r\n            heatLegend.valueAxis.hideTooltip();\r\n          }\r\n        });\r\n        \r\n        brazilPolygonTemplate.events.on(\"out\", function(ev) {\r\n          heatLegend.valueAxis.hideTooltip();\r\n        });\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"chartdiv\" style={{display: 'flex', alignSelf: 'center', width: '80%', margin: '20px auto', padding: '20px', height: '800px', backgroundColor: '#dbdbdb'}} />\r\n  )\r\n}\r\n\r\nexport default MapChart","import React, { useEffect } from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\"\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nconst AngularChart = () => {\r\n  useEffect(() => {\r\n    am4core.useTheme(am4themes_animated)\r\n    let chart = am4core.create(\"angularChart\", am4charts.GaugeChart)\r\n    chart.hiddenState.properties.opacity = 0\r\n    chart.innerRadius = -25;\r\n\r\n    let axis = chart.xAxes.push(new am4charts.ValueAxis());\r\n    axis.min = 0;\r\n    axis.max = 100;\r\n    axis.strictMinMax = true;\r\n    axis.renderer.grid.template.stroke = new am4core.InterfaceColorSet().getFor(\"background\");\r\n    axis.renderer.grid.template.strokeOpacity = 0.3;\r\n\r\n    let colorSet = new am4core.ColorSet();\r\n\r\n    let range0 = axis.axisRanges.create();\r\n    range0.value = 0;\r\n    range0.endValue = 50;\r\n    range0.axisFill.fillOpacity = 1;\r\n    range0.axisFill.fill = colorSet.getIndex(0);\r\n    range0.axisFill.zIndex = - 1;\r\n\r\n    let range1 = axis.axisRanges.create();\r\n    range1.value = 50;\r\n    range1.endValue = 80;\r\n    range1.axisFill.fillOpacity = 1;\r\n    range1.axisFill.fill = colorSet.getIndex(2);\r\n    range1.axisFill.zIndex = -1;\r\n\r\n    let range2 = axis.axisRanges.create();\r\n    range2.value = 80;\r\n    range2.endValue = 100;\r\n    range2.axisFill.fillOpacity = 1;\r\n    range2.axisFill.fill = colorSet.getIndex(4);\r\n    range2.axisFill.zIndex = -1;\r\n\r\n    let hand = chart.hands.push(new am4charts.ClockHand());\r\n    hand.showValue(Math.random() * 100, 0, am4core.ease.cubicOut)\r\n  }, [])\r\n  return (\r\n    <div className=\"angularChart\" id=\"angularChart\" style={{width: '80%', height: '600px', margin: 'auto'}}></div>\r\n  )\r\n}\r\n\r\nexport default AngularChart","import React, { useEffect } from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\"\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nconst PolarChart = () => {\r\n  useEffect(() => {\r\n    am4core.useTheme(am4themes_animated)\r\n    let chart = am4core.create(\"polarChart\", am4charts.RadarChart)\r\n\r\n    /* Add data */\r\n    chart.data = [{\r\n      \"direction\": \"N\",\r\n      \"value\": 8\r\n    }, {\r\n      \"direction\": \"NE\",\r\n      \"value\": 9\r\n    }, {\r\n      \"direction\": \"E\",\r\n      \"value\": 4.5\r\n    }, {\r\n      \"direction\": \"SE\",\r\n      \"value\": 3.5\r\n    }, {\r\n      \"direction\": \"S\",\r\n      \"value\": 9.2\r\n    }, {\r\n      \"direction\": \"SW\",\r\n      \"value\": 8.4\r\n    }, {\r\n      \"direction\": \"W\",\r\n      \"value\": 11.1\r\n    }, {\r\n      \"direction\": \"NW\",\r\n      \"value\": 10\r\n    }];\r\n\r\n    /* Create axes */\r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = \"direction\";\r\n\r\n    /*let valueAxis = */chart.yAxes.push(new am4charts.ValueAxis());\r\n    //valueAxis.renderer.gridType = \"polygons\";\r\n\r\n    let range = categoryAxis.axisRanges.create();\r\n    range.category = \"NW\";\r\n    range.endCategory = \"NW\";\r\n    //range.axisFill.fill = am4core.color(\"#0066CC\");\r\n    range.axisFill.fillOpacity = 0.3;\r\n\r\n    let range2 = categoryAxis.axisRanges.create();\r\n    range2.category = \"N\";\r\n    range2.endCategory = \"N\";\r\n    //range2.axisFill.fill = am4core.color(\"#0066CC\");\r\n    range2.axisFill.fillOpacity = 0.3;\r\n\r\n    let range3 = categoryAxis.axisRanges.create();\r\n    range3.category = \"SE\";\r\n    range3.endCategory = \"SW\";\r\n    //range3.axisFill.fill = am4core.color(\"#CC3333\");\r\n    range3.axisFill.fillOpacity = 0.3;\r\n    range3.locations.endCategory = 0;\r\n\r\n    /* Create and configure series */\r\n    let series = chart.series.push(new am4charts.RadarSeries());\r\n    series.dataFields.valueY = \"value\";\r\n    series.dataFields.categoryX = \"direction\";\r\n    series.name = \"Wind direction\";\r\n    series.strokeWidth = 3;\r\n    series.fillOpacity = 0.2;\r\n\r\n  }, [])\r\n  return (\r\n    <div className=\"polarChart\" id=\"polarChart\" style={{ width: '80%', height: '600px', margin: 'auto' }}></div>\r\n  )\r\n}\r\n\r\nexport default PolarChart","import React from 'react'\r\nimport MapChart from './MapChart'\r\nimport AngularChart from './AngularChart'\r\nimport PolarChart from './PolarChart'\r\n\r\nconst ChartsAmCharts = () => {\r\n  return (\r\n    <>\r\n    <MapChart />\r\n    <AngularChart />\r\n    <PolarChart />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChartsAmCharts","import React from 'react';\r\nimport './App.css';\r\n//import ChartsD3 from './ChartsD3';\r\nimport ChartsAmCharts from './ChartsAmCharts';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<ChartsD3 />*/}\r\n      <ChartsAmCharts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}