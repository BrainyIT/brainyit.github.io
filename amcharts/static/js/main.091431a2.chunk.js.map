{"version":3,"sources":["ChartsAmCharts/barChart.js","ChartsAmCharts/MapChart.js","ChartsAmCharts/PolarChart.js","ChartsAmCharts/ColumnChart.js","ChartsAmCharts/index.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","useEffect","am4core","am4themes_animated","chart","am4charts","padding","data","target","list","categoryAxis","yAxes","push","dataFields","category","renderer","minGridDistance","inversed","labels","template","dx","align","grid","disabled","location","valueAxis","xAxes","min","max","visible","series","categoryY","valueX","tooltipText","columns","strokeOpacity","column","cornerRadiusBottomRight","cornerRadiusTopRight","cornerRadiusTopLeft","cellStartLocation","cellEndLocation","labelBullet","bullets","label","horizontalCenter","text","locationX","adapter","add","fill","maskBullets","fixedWidthGrid","responsive","enabled","id","className","style","height","MapChart","fetch","then","res","json","resJSON","geoJSON","topojson","objects","features","map","feature","properties","CD_UF","randomData","name","NM_UF","value","Math","floor","random","am4maps","geodata","projection","Miller","exporting","menu","title","titles","create","fontSize","marginTop","marginBottom","brazilSeries","brazilPolygonTemplate","mapPolygons","colors","getIndex","nonScalingStroke","heatRules","property","brighten","events","on","e","console","log","dataItem","dataContext","states","heatLegend","createChild","width","marginRight","minValue","maxValue","valign","minRange","axisRanges","maxRange","labelText","ev","isNaN","hideTooltip","showTooltipAt","PolarChart","seriesContainer","zIndex","stacked","categoryX","valueY","radarColumn","cornerRadius","innerCornerRadius","locationY","zoomOutButton","ColumnChart","customTheme","step","legend","position","paddingTop","contentAlign","maxWidth","useDefaultMarker","markers","children","xAxis","yAxis","createSeries","arrangeColumns","bullet","interactionsEnabled","dy","w","dataItems","length","x0","getX","delta","middle","newIndex","each","isHidden","isHiding","dummyData","indexOf","newMiddle","trueIndex","animate","to","interpolationDuration","interpolationEasing","bulletsContainer","results","first","second","third","margin","overflow","ChartsAmCharts","display","border","gridTemplateColumns","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.091431a2.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\"\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nconst BarChart = () => {\r\n\r\n  useEffect(() => {\r\n    // Aplica tema padrão ao AmCharts\r\n    am4core.useTheme(am4themes_animated)\r\n    // Cria instância de gráfico\r\n    let chart = am4core.create(\"barchart\", am4charts.XYChart)\r\n    //Espaçamento interno geral dos gráficos (cima, esquerda, baixo, direita)\r\n    chart.padding(20, 0, 20, 120)\r\n    //Dados do gráfico. O formato é livre, desde que seja um array de objetos. Indicar propriedades de categoria e valor depois de defini-los.\r\n    chart.data = [\r\n      {\r\n        \"category\": \"Urbanização das Vias Públicas\",\r\n        \"value\": 5\r\n      },\r\n      {\r\n        \"category\": \"Transporte\",\r\n        \"value\": 4.5\r\n      },\r\n      {\r\n        \"category\": \"Sistemas e Tecnologias para Gestão Urbana\",\r\n        \"value\": 4\r\n      },\r\n      {\r\n        \"category\": \"Serviços Online da Prefeitura\",\r\n        \"value\": 3\r\n      },\r\n      {\r\n        \"category\" : \"Resíduos Sólidos\",\r\n        \"value\": 2\r\n      },\r\n      {\r\n        \"category\": \"Inovação\",\r\n        \"value\": 4.5\r\n      },\r\n      {\r\n        \"category\": \"Infraestrutura e Conectividade\",\r\n        \"value\": 5\r\n      },\r\n      {\r\n        \"category\": \"Habitação\",\r\n        \"value\": 4\r\n      },\r\n      {\r\n        \"category\": \"Dados Abertos\",\r\n        \"value\": 4\r\n      },\r\n      {\r\n        \"category\": \"Água e Esgoto\",\r\n        \"value\": 3.5\r\n      }\r\n    ]\r\n\r\n    function customTheme(target) {\r\n      if (target instanceof am4core.ColorSet) {\r\n        target.list = [\r\n          am4core.color(\"#aee0e6\"),\r\n          am4core.color(\"#82c6cf\"),\r\n          am4core.color(\"#1fbacc\"),\r\n          am4core.color(\"#1a9ead\"),\r\n          am4core.color(\"#188794\"),\r\n          am4core.color(\"#12707a\"),\r\n          am4core.color(\"#0e5d66\")\r\n        ]\r\n      }\r\n    }\r\n\r\n    // Themes begin\r\n    am4core.useTheme(customTheme)\r\n\r\n    //Eixo das categorias -> usar xAxes para gráfico de colunas e yAxes para gráfico de barras. \r\n    let categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());\r\n    //Obtém o eixo das categorias a partir de propriedade de objetos do array de chart.data\r\n    categoryAxis.dataFields.category = \"category\";\r\n    //Espaçamento mínimo entre barras por grid\r\n    categoryAxis.renderer.minGridDistance = 0.2;\r\n    //Eixo de categorias renderizado de forma invertida\r\n    categoryAxis.renderer.inversed = true;\r\n    //Distância absoluta do eixo de categorias. Valores negativos deslocam à esquerda, e positivos à direita\r\n    categoryAxis.renderer.labels.template.dx = -100;\r\n    //Alinhamento do texto do eixo de categorias\r\n    categoryAxis.renderer.labels.template.align = 'left'\r\n    //Remove as linhas horizontais do grid\r\n    categoryAxis.renderer.grid.template.disabled = false;\r\n    //Ajusta posicionamento das barras/colunas no meio de cada grid\r\n    categoryAxis.renderer.grid.template.location = 1\r\n\r\n    //Eixo dos valores. usar yAxes para gráfico de colunas e xAxes para gráfico de barras.\r\n    let valueAxis = chart.xAxes.push(new am4charts.ValueAxis());\r\n    //Valores mínimo e máximo do gráfico\r\n    valueAxis.min = 0;\r\n    valueAxis.max = 5;\r\n    //Tornar invisível o eixo de valores\r\n    valueAxis.visible = false\r\n    //Retirar grid do eixo de valores\r\n    valueAxis.renderer.grid.template.disabled = true;\r\n    //Opções de ajustes das barras/colunas\r\n    let series = chart.series.push(new am4charts.ColumnSeries());\r\n    series.dataFields.categoryY = \"category\";\r\n    series.dataFields.valueX = \"value\";\r\n    series.tooltipText = \"{valueX.value}\"\r\n    series.columns.template.strokeOpacity = 0;\r\n    series.columns.template.column.cornerRadiusBottomRight = 2;\r\n    series.columns.template.column.cornerRadiusTopRight = 2;\r\n    series.columns.template.column.cornerRadiusTopLeft = 2;\r\n    series.columns.template.column.cornerRadiusBottomRight = 2;\r\n\r\n    //Largura da barra relativa ao grid (0 para extremidade esquerda e 1 para extremidade direita)\r\n    categoryAxis.renderer.cellStartLocation = 0.2;\r\n    categoryAxis.renderer.cellEndLocation = 0.8;\r\n\r\n    //Bullets com os valores\r\n    let labelBullet = series.bullets.push(new am4charts.LabelBullet())\r\n    labelBullet.label.horizontalCenter = \"left\";\r\n    //Deslocamento dos bullets à esquerda das barras/colunas\r\n    labelBullet.label.dx = -50;\r\n    //Formatação com duas casas decimais dos valores dos bullets\r\n    labelBullet.label.text = \"{values.valueX.workingValue.formatNumber('#.00as')}\";\r\n    labelBullet.locationX = 1;\r\n\r\n    //Adiciona cor padrão a todas as colunas/barras\r\n    series.columns.template.adapter.add(\"fill\", (fill, target) => am4core.color('#188794'))\r\n\r\n    //Permite que bullets se sobreponham mesmo quando seu valor de deslocamento é maior que a dimensão da barra/coluna\r\n    chart.maskBullets = false;\r\n    chart.fixedWidthGrid = true\r\n    chart.responsive.enabled = true;\r\n    //Ordenação dos valores do gráfico. Com inversed = true, os valores são ordenados em ordem decrescente.\r\n    //categoryAxis.sortBySeries = series;\r\n  }, [])\r\n  return (\r\n    <div id=\"barchart\" className=\"item\" style={{ height: '400px' }}></div>\r\n  )\r\n}\r\n\r\nexport default BarChart","/* Imports */\r\nimport React from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { useEffect } from \"react\";\r\nimport * as topojson from 'topojson-client'\r\n\r\nconst MapChart = () => {\r\n\r\n  useEffect(() => {\r\n    fetch('./maps/BR_UF_2019.json')\r\n      .then(res => res.json())\r\n      .then(resJSON => {\r\n\r\n        const geoJSON = topojson.feature(\r\n          resJSON,\r\n          resJSON.objects['BR_UF_2019']\r\n        )\r\n\r\n        geoJSON.features.map(feature => {\r\n          feature.id = feature.properties.CD_UF\r\n          return feature\r\n        })\r\n\r\n        const randomData = geoJSON.features.map(feature => {\r\n          feature.properties.name = feature.properties.NM_UF\r\n          feature.properties.value = Math.floor((Math.random() * 7) + 1)\r\n          return feature\r\n        })\r\n\r\n        function customTheme(target) {\r\n          if (target instanceof am4core.ColorSet) {\r\n            target.list = [\r\n              am4core.color(\"#aee0e6\"),\r\n              am4core.color(\"#82c6cf\"),\r\n              am4core.color(\"#1fbacc\"),\r\n              am4core.color(\"#1a9ead\"),\r\n              am4core.color(\"#188794\"),\r\n              am4core.color(\"#12707a\"),\r\n              am4core.color(\"#0e5d66\")\r\n            ]\r\n          }\r\n        }\r\n\r\n        // Themes begin\r\n        am4core.useTheme(customTheme)\r\n\r\n        am4core.useTheme(am4themes_animated);\r\n        let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n        chart.geodata = geoJSON\r\n        chart.projection = new am4maps.projections.Miller();\r\n        chart.exporting.menu = new am4core.ExportMenu();\r\n        \r\n        let title = chart.titles.create();\r\n        title.text = \"Nível de Maturidade por U.F.\";\r\n        title.fontSize = 15;\r\n        title.marginTop = 15\r\n        title.marginBottom = 25\r\n\r\n        let brazilSeries = chart.series.push(new am4maps.MapPolygonSeries(randomData));\r\n        brazilSeries.geodata = geoJSON;\r\n\r\n        let brazilPolygonTemplate = brazilSeries.mapPolygons.template;\r\n        brazilPolygonTemplate.tooltipText = \"{name} - Nota {value}\";\r\n        brazilPolygonTemplate.fill = chart.colors.getIndex(1);\r\n        brazilPolygonTemplate.nonScalingStroke = true;\r\n\r\n        brazilSeries.heatRules.push({\r\n          property: \"fill\",\r\n          target: brazilPolygonTemplate,\r\n          min: chart.colors.getIndex(1).brighten(1),\r\n          max: chart.colors.getIndex(1).brighten(-0.5)\r\n        });\r\n\r\n        brazilPolygonTemplate.events.on(\"hit\", e => {\r\n          console.log(e.target.dataItem.dataContext.name);\r\n          console.log(e.target.dataItem.dataContext.value);\r\n        })\r\n\r\n        let hs = brazilPolygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = am4core.color(\"#367B25\");\r\n\r\n        let heatLegend = chart.createChild(am4maps.HeatLegend);\r\n            heatLegend.series = brazilSeries;\r\n            heatLegend.align = \"right\";\r\n            heatLegend.width = am4core.percent(25);\r\n            heatLegend.marginRight = am4core.percent(4);\r\n            heatLegend.marginBottom = am4core.percent(10)\r\n            heatLegend.minValue = 1;\r\n            heatLegend.maxValue = 7;\r\n            heatLegend.valign = \"bottom\";\r\n\r\n        // Set up custom heat map legend labels using axis ranges\r\n        let minRange = heatLegend.valueAxis.axisRanges.create();\r\n        minRange.value = heatLegend.minValue;\r\n        minRange.label.text = \"Baixo\";\r\n        let maxRange = heatLegend.valueAxis.axisRanges.create();\r\n        maxRange.value = heatLegend.maxValue;\r\n        maxRange.label.text = \"Alto\";\r\n\r\n        heatLegend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(labelText) {\r\n          return \"\";\r\n        });\r\n\r\n        brazilPolygonTemplate.events.on(\"over\", function(ev) {\r\n          if (!isNaN(ev.target.dataItem.value)) {\r\n            heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n          }\r\n          else {\r\n            heatLegend.valueAxis.hideTooltip();\r\n          }\r\n        });\r\n        \r\n        brazilPolygonTemplate.events.on(\"out\", function(ev) {\r\n          heatLegend.valueAxis.hideTooltip();\r\n        });\r\n        chart.responsive.enabled = true;\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"chartdiv\" className=\"item\" style={{ height: '400px'}} />\r\n  )\r\n}\r\n\r\nexport default MapChart","import React, { useEffect } from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\"\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nconst PolarChart = () => {\r\n  useEffect(() => {\r\n    am4core.useTheme(am4themes_animated);\r\n    // Themes end\r\n    \r\n    let chart = am4core.create(\"polarChart\", am4charts.RadarChart);\r\n    \r\n    chart.data = [{\r\n     \"category\": \"Políticas Públicas\",\r\n     \"score\": 7\r\n    }, {\r\n     \"category\": \"Tecnologia e Inovação\",\r\n     \"score\": 5\r\n    }, {\r\n     \"category\": \"Saúde Pública\",\r\n     \"score\": 3\r\n    }, {\r\n     \"category\": \"Segurança\",\r\n     \"score\": 1\r\n    }, {\r\n     \"category\": \"Meio Ambiente\",\r\n     \"score\": 4\r\n    }, {\r\n     \"category\": \"Infraestrutura\",\r\n     \"score\": 6\r\n    }, {\r\n     \"category\": \"Saneamento Básico\",\r\n     \"score\": 2\r\n    }, {\r\n     \"category\": \"Energia\",\r\n     \"score\": 6\r\n    }];\r\n    \r\n    //chart.innerRadius = am4core.percent(1)\r\n    \r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.renderer.grid.template.location = 0.5;\r\n    categoryAxis.dataFields.category = \"category\";\r\n    categoryAxis.renderer.minGridDistance = 50;\r\n    categoryAxis.renderer.inversed = true;\r\n    categoryAxis.renderer.labels.template.location = 0.5;\r\n    categoryAxis.renderer.grid.template.strokeOpacity = 0.08;\r\n    \r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.min = 0;\r\n    valueAxis.disabled = true\r\n    valueAxis.renderer.grid.template.strokeOpacity = 0.08;\r\n    \r\n    chart.seriesContainer.zIndex = 0;\r\n    \r\n    let series = chart.series.push(new am4charts.RadarColumnSeries());\r\n    series.stacked = true\r\n    series.dataFields.categoryX = \"category\";\r\n    series.dataFields.valueY = \"score\";\r\n    series.tooltipText = \"{valueY.value}\"\r\n    series.columns.template.strokeOpacity = 0;\r\n    series.columns.template.radarColumn.cornerRadius = 1;\r\n    series.columns.template.radarColumn.innerCornerRadius = 0;\r\n    series.columns.template.width = am4core.percent(100);\r\n    \r\n    series.heatRules.push({\r\n      \"target\": series.columns.template,\r\n      \"property\": \"fill\",\r\n      \"min\": chart.colors.getIndex(1).brighten(1),\r\n      \"max\": chart.colors.getIndex(1).brighten(-0.5),\r\n      \"dataField\": \"valueY\"\r\n    });\r\n\r\n    var labelBullet = series.bullets.push(new am4charts.LabelBullet())\r\n    labelBullet.label.text = \"{valueY}\"\r\n    labelBullet.locationY = 0.25\r\n    labelBullet.label.fill = am4core.color(\"#000\")\r\n    \r\n    chart.zoomOutButton.disabled = true;\r\n    chart.responsive.enabled = true;\r\n    \r\n    // as by default columns of the same series are of the same color, we add adapter which takes colors from chart.colors color set\r\n    /*series.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n     return chart.colors.getIndex(target.dataItem.index);\r\n    });*/\r\n    \r\n    /*setInterval(()=>{\r\n     am4core.array.each(chart.data, (item)=>{\r\n       item.visits *= Math.random() * 0.5 + 0.5;\r\n       item.visits += 10;\r\n     })\r\n     chart.invalidateRawData();\r\n    }, 2000)*/\r\n    \r\n    //categoryAxis.sortBySeries = series;\r\n    \r\n    /*chart.cursor = new am4charts.RadarCursor();\r\n    chart.cursor.behavior = \"none\";\r\n    chart.cursor.lineX.disabled = true;\r\n    chart.cursor.lineY.disabled = true;*/\r\n\r\n  }, [])\r\n  return (\r\n    <div className=\"item\" id=\"polarChart\" style={{ height: '400px' }}></div>\r\n  )\r\n}\r\n\r\nexport default PolarChart","import React, { useEffect } from 'react'\r\nimport * as am4core from \"@amcharts/amcharts4/core\"\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\n\r\nconst ColumnChart = () => {\r\n  useEffect(() => {\r\n\r\n    fetch('./maps/fakedata-municipios.json')\r\n      .then(res => res.json())\r\n      .then(resJSON => {\r\n  \r\n        function customTheme(target) {\r\n          if (target instanceof am4core.ColorSet) {\r\n            target.list = [\r\n              am4core.color(\"#aee0e6\"),\r\n              am4core.color(\"#82c6cf\"),\r\n              am4core.color(\"#1fbacc\"),\r\n              am4core.color(\"#1a9ead\"),\r\n              am4core.color(\"#188794\"),\r\n              am4core.color(\"#12707a\"),\r\n              am4core.color(\"#0e5d66\")\r\n            ]\r\n          }\r\n        }\r\n\r\n        // Themes begin\r\n        am4core.useTheme(customTheme)\r\n        am4core.useTheme(am4themes_animated)\r\n        // Themes end\r\n\r\n        var chart = am4core.create('columnchart', am4charts.XYChart)\r\n        chart.colors.step = 2\r\n\r\n        chart.fixedWidthGrid = true\r\n\r\n        chart.legend = new am4charts.Legend()\r\n        chart.legend.position = 'bottom'\r\n        chart.legend.paddingTop = 10\r\n        chart.legend.contentAlign = 'left'\r\n        chart.legend.labels.template.maxWidth = 95\r\n        chart.legend.useDefaultMarker = true\r\n\r\n        var marker = chart.legend.markers.template.children.getIndex(0)\r\n        marker.cornerRadius(12, 12, 12, 12)\r\n\r\n        var xAxis = chart.xAxes.push(new am4charts.CategoryAxis())\r\n        xAxis.dataFields.category = 'category'\r\n        xAxis.renderer.cellStartLocation = 0.2\r\n        xAxis.renderer.cellEndLocation = 0.8\r\n        xAxis.renderer.grid.template.location = 0\r\n        xAxis.renderer.grid.template.disabled = true;\r\n\r\n        var yAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n        yAxis.min = 0\r\n        yAxis.max = 8\r\n        yAxis.renderer.grid.template.disabled = true\r\n        yAxis.renderer.labels.template.disabled = true\r\n\r\n        function createSeries(value, name) {\r\n          var series = chart.series.push(new am4charts.ColumnSeries())\r\n          series.dataFields.valueY = value\r\n          series.dataFields.categoryX = 'category'\r\n          series.name = name\r\n          series.columns.template.width = 17\r\n          series.columns.template.column.cornerRadiusTopRight = am4core.percent(95)\r\n          series.columns.template.column.cornerRadiusTopLeft = am4core.percent(95)\r\n\r\n          series.events.on(\"hidden\", arrangeColumns)\r\n          series.events.on(\"shown\", arrangeColumns)\r\n\r\n          var bullet = series.bullets.push(new am4charts.LabelBullet())\r\n          bullet.interactionsEnabled = false\r\n          bullet.dy = -10\r\n          bullet.label.text = '[bold] {valueY}'\r\n          bullet.label.fill = am4core.color('#076f7b')\r\n\r\n          return series\r\n        }\r\n\r\n        chart.data = [\r\n          {\r\n            category: resJSON[0].results[0].name,\r\n            first: resJSON[0].results[0].value,\r\n            second: resJSON[0].results[1].value,\r\n            third: resJSON[0].results[2].value\r\n          },\r\n          {\r\n            category: resJSON[1].results[1].name,\r\n            first: resJSON[1].results[0].value,\r\n            second: resJSON[1].results[1].value,\r\n            third: resJSON[1].results[2].value\r\n          },\r\n          {\r\n            category: resJSON[0].results[2].name,\r\n            first: resJSON[2].results[0].value,\r\n            second: resJSON[2].results[1].value,\r\n            third: resJSON[2].results[2].value\r\n          },\r\n          {\r\n            category: resJSON[0].results[3].name,\r\n            first: resJSON[3].results[0].value,\r\n            second: resJSON[3].results[1].value,\r\n            third: resJSON[3].results[2].value\r\n          }\r\n        ]\r\n\r\n        createSeries('first', 'Mínimo')\r\n        createSeries('second', 'Médio')\r\n        createSeries('third', 'Máximo')\r\n\r\n        function arrangeColumns() {\r\n\r\n          var series = chart.series.getIndex(0);\r\n\r\n          var w = 1 - xAxis.renderer.cellStartLocation - (1 - xAxis.renderer.cellEndLocation);\r\n          if (series.dataItems.length > 1) {\r\n            var x0 = xAxis.getX(series.dataItems.getIndex(0), \"categoryX\");\r\n            var x1 = xAxis.getX(series.dataItems.getIndex(1), \"categoryX\");\r\n            var delta = ((x1 - x0) / chart.series.length) * w;\r\n            if (am4core.isNumber(delta)) {\r\n              var middle = chart.series.length / 2;\r\n\r\n              var newIndex = 0;\r\n              chart.series.each(function (series) {\r\n                if (!series.isHidden && !series.isHiding) {\r\n                  series.dummyData = newIndex;\r\n                  newIndex++;\r\n                }\r\n                else {\r\n                  series.dummyData = chart.series.indexOf(series);\r\n                }\r\n              })\r\n              var visibleCount = newIndex;\r\n              var newMiddle = visibleCount / 2;\r\n\r\n              chart.series.each(function (series) {\r\n                var trueIndex = chart.series.indexOf(series);\r\n                var newIndex = series.dummyData;\r\n\r\n                var dx = (newIndex - trueIndex + middle - newMiddle) * delta\r\n\r\n                series.animate({ property: \"dx\", to: dx }, series.interpolationDuration, series.interpolationEasing);\r\n                series.bulletsContainer.animate({ property: \"dx\", to: dx }, series.interpolationDuration, series.interpolationEasing);\r\n              })\r\n            }\r\n          }\r\n        }\r\n        am4core.unuseTheme(customTheme)\r\n      }, [])\r\n  })\r\n\r\n\r\n  return (\r\n    <div style={{margin: 'auto', overflow: 'auto' }}>\r\n      <div id=\"columnchart\" style={{ width: '600px', height: '400px', margin: 'auto' }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ColumnChart\r\n","import React from 'react'\r\nimport BarChart from './barChart'\r\nimport MapChart from './MapChart'\r\nimport PolarChart from './PolarChart'\r\nimport ColumnChart from './ColumnChart'\r\n\r\nconst ChartsAmCharts = () => {\r\n  return (\r\n    <div className=\"grid\" style={{display: 'grid', width: '90%', margin: 'auto', border: '1px solid #ccc', gridTemplateColumns: '1fr 1fr'}}>\r\n      <MapChart />\r\n      <BarChart />\r\n      <PolarChart />\r\n      <ColumnChart />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChartsAmCharts","import React from 'react';\r\nimport './App.css';\r\n//import ChartsD3 from './ChartsD3';\r\nimport ChartsAmCharts from './ChartsAmCharts';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*<ChartsD3 />*/}\r\n      <ChartsAmCharts />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}