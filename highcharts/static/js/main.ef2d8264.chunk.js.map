{"version":3,"sources":["Charts/countryChart.js","Charts/cityChartAngular.js","Charts/cityChartPolar.js","Charts/index.js","App.js","serviceWorker.js","index.js","assets/mapa-mundi.png"],"names":["CountryChart","onStateChanged","useState","isLoading","setIsLoading","useEffect","HighchartsMaps","Highcharts","HighChartsExport","HighChartsExportOffline","fetch","then","res","json","resJSON","geoJSON","topojson","objects","randomData","features","map","feature","id","properties","SIGLA_UF","name","NM_UF","Math","floor","random","mapChart","chart","type","title","text","plotOptions","series","events","click","e","point","mapNavigation","enabled","buttonOptions","verticalAlign","colorAxis","dataClasses","from","to","color","data","keys","joinBy","borderColor","borderWidth","states","hover","cursor","dataLabels","format","exporting","menuItemDefinitions","onclick","input","document","getElementById","html2canvas","canvas","imgData","toDataURL","pdf","jsPDF","addImage","save","style","display","alignItems","justifyContent","flexDirection","width","margin","padding","src","MapaMundiLoading","alt","CityChartAngular","options","setOptions","HighChartsMore","HighChartsGauge","pane","center","size","startAngle","endAngle","background","backgroundColor","defaultOptions","legend","innerRadius","outerRadius","shape","tooltip","yAxis","stops","lineWidth","tickWidth","minorTickInterval","tickAmount","y","labels","min","max","credits","Number","toFixed","valueSuffix","solidgauge","useHTML","highcharts","containerProps","className","CityChartPolar","chartLabel","label","polar","subtitle","xAxis","categories","visible","pointStart","pointPlacement","currentStateChange","state","action","value","Charts","useReducer","currentState","dispatch","console","log","handleStateChange","useCallback","borderRadius","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.ef2d8264.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsMaps from 'highcharts/modules/map'\r\nimport HighChartsExport from 'highcharts/modules/exporting'\r\nimport HighChartsExportOffline from 'highcharts/modules/offline-exporting'\r\nimport MapaMundiLoading from '../assets/mapa-mundi.png'\r\nimport * as jsPDF from 'jspdf'\r\nimport html2canvas from 'html2canvas'\r\nimport * as topojson from 'topojson-client'\r\n\r\nconst CountryChart = ({ onStateChanged }) => {\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    HighchartsMaps(Highcharts)\r\n    HighChartsExport(Highcharts)\r\n    HighChartsExportOffline(Highcharts)\r\n\r\n    fetch('./maps/BR_UF_2019.json')\r\n      .then(res => res.json())\r\n      .then(resJSON => {\r\n        const geoJSON = topojson.feature(\r\n          resJSON,\r\n          resJSON.objects['BR_UF_2019']\r\n        )\r\n\r\n        const randomData = geoJSON.features.map(feature => {\r\n          feature.id = feature.properties.SIGLA_UF\r\n          feature.properties.name = feature.properties.NM_UF\r\n          return [feature.properties.SIGLA_UF, (Math.floor((Math.random() * 7) + 1))]\r\n        })\r\n\r\n        Highcharts.mapChart('mapChart', {\r\n          chart: {\r\n            type: 'map',\r\n            map: {...geoJSON, features: [...geoJSON.features]}\r\n          },\r\n          title: {\r\n            text: 'Mapa do Brasil'\r\n          },\r\n          plotOptions: {\r\n            series: {\r\n              events: {\r\n                click: e => onStateChanged(e.point.SIGLA_UF)\r\n              }\r\n            }\r\n          },\r\n          mapNavigation: {\r\n            enabled: true,\r\n            buttonOptions: {\r\n              verticalAlign: 'bottom'\r\n            }\r\n          },\r\n          colorAxis: {\r\n            dataClasses: [\r\n              { name: \"Nível 1\", from: 1, to: 1, color: '#FFD3C1' },\r\n              { name: \"Nível 2\", from: 2, to: 2, color: '#FDA34A' },\r\n              { name: \"Nível 3\", from: 3, to: 3, color: '#E27441' },\r\n              { name: \"Nível 4\", from: 4, to: 4, color: '#AB3035' },\r\n              { name: \"Nível 5\", from: 5, to: 5, color: '#8F273F' },\r\n              { name: \"Nível 6\", from: 6, to: 6, color: '#731F42' },\r\n              { name: \"Nível 7\", from: 7, to: 7, color: '#57173D' }\r\n            ]\r\n          },\r\n          series: [\r\n            {\r\n              data: randomData,\r\n              keys: ['SIGLA_UF', 'value'],\r\n              joinBy: 'SIGLA_UF',\r\n              name: 'Avaliação de maturidade',\r\n              borderColor: '#222',\r\n              borderWidth: 0.3,\r\n              states: {\r\n                hover: {\r\n                  color: '#AA8AB2'\r\n                }\r\n              },\r\n              cursor: 'pointer',\r\n              dataLabels: {\r\n                enabled: false,\r\n                format: '{point.properties.SIGLA_UF}'\r\n              }\r\n            }\r\n          ],\r\n          exporting: {\r\n            menuItemDefinitions: {\r\n              \"viewFullscreen\": {\r\n                text: 'Visualizar em tela cheia'\r\n              },\r\n              \"printChart\": {\r\n                text: 'Imprimir gráfico'\r\n              },\r\n              \"separator\": {},\r\n              \"downloadPNG\": {\r\n                text: 'Baixar em imagem PNG'\r\n              },\r\n              \"downloadJPEG\": {\r\n                text: 'Baixar em imagem JPEG'\r\n              },\r\n              \"downloadSVG\": {\r\n                text: 'Baixar em imagem vetorial SVG'\r\n              },\r\n              \"downloadPDF\": {\r\n                text: 'Baixar em formato PDF',\r\n                onclick: function() {\r\n                  //TODO: Ajustar configurações de layout: orientação e tamanho do documento\r\n                  const input = document.getElementById('mapChart')\r\n                  html2canvas(input)\r\n                    .then((canvas) => {\r\n                      const imgData = canvas.toDataURL('image/png')\r\n                      const pdf = new jsPDF()\r\n                      pdf.addImage(imgData, 'PNG', 0, 0)\r\n                      pdf.save(\"chart.pdf\")\r\n                    })\r\n                  ;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n        setIsLoading(false)\r\n      })\r\n  }, [onStateChanged])\r\n\r\n  return (\r\n    <>\r\n      <p>Clique em um estado para visualizar seus municípios</p>\r\n      <div id=\"mapChart\"></div>\r\n      {\r\n        isLoading &&\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <h3>Carregando gráfico...</h3>\r\n          <div style={{ width: '95%', margin: 'auto', padding: '0.5rem' }}>\r\n            <img src={MapaMundiLoading} alt=\"Mapa-mundi\" width=\"256\" />\r\n          </div>\r\n        </div>\r\n      }\r\n      {\r\n        !isLoading &&\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          {/*<button onClick={updateRandomValues}>Gerar dados aleatórios</button>*/}\r\n\r\n          {/*<HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n            constructorType={'mapChart'}\r\n            containerProps={{ className: 'grafico', style: { width: '95%', margin: 'auto', padding: '0.5rem' } }}\r\n          />*/}\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CountryChart","import React, { useState, useEffect } from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighChartsMore from 'highcharts/highcharts-more'\r\nimport HighChartsGauge from 'highcharts/modules/solid-gauge'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport MapaMundiLoading from '../assets/mapa-mundi.png'\r\n\r\nconst CityChartAngular = () => {\r\n  const [options, setOptions] = useState({})\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    HighChartsMore(Highcharts)\r\n    HighChartsGauge(Highcharts)\r\n    setOptions(\r\n      {\r\n        chart: {\r\n          type: 'solidgauge'\r\n        },\r\n\r\n        title: {\r\n          text: 'Índice tal'\r\n        },\r\n\r\n        pane: {\r\n          center: ['50%', '85%'],\r\n          size: '140%',\r\n          startAngle: -90,\r\n          endAngle: 90,\r\n          background: {\r\n            backgroundColor:\r\n              Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\r\n            innerRadius: '60%',\r\n            outerRadius: '100%',\r\n            shape: 'arc'\r\n          }\r\n        },\r\n\r\n        exporting: {\r\n          enabled: false\r\n        },\r\n\r\n        tooltip: {\r\n          enabled: true\r\n        },\r\n\r\n        // the value axis\r\n        yAxis: {\r\n          stops: [\r\n            [0.1, '#DF5353'],\r\n            [0.5, '#DDDF0D'],\r\n            [0.9, '#55BF3B'] \r\n          ],\r\n          lineWidth: 0,\r\n          tickWidth: 0,\r\n          minorTickInterval: null,\r\n          tickAmount: 2,\r\n          title: {\r\n            y: -70,\r\n            text: 'Valor do índice'\r\n          },\r\n          labels: {\r\n            y: 16\r\n          },\r\n          min: 0,\r\n          max: 1\r\n        },\r\n\r\n        credits: {\r\n          enabled: false\r\n        },\r\n\r\n        series: [{\r\n          name: 'Índice tal',\r\n          data: [Number(Math.random().toFixed(2))],\r\n          dataLabels: {\r\n            format:\r\n              '<div style=\"text-align:center\">' +\r\n              '<span style=\"font-size:25px\">{y}</span><br/>' +\r\n              '<span style=\"font-size:12px;opacity:0.4\">pts</span>' +\r\n              '</div>'\r\n          },\r\n          tooltip: {\r\n            valueSuffix: ' pts'\r\n          }\r\n        }],\r\n\r\n        plotOptions: {\r\n          solidgauge: {\r\n            dataLabels: {\r\n              y: 5,\r\n              borderWidth: 0,\r\n              useHTML: true\r\n            }\r\n          }\r\n        }\r\n      }\r\n    )\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        isLoading &&\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div style={{ width: '95%', margin: 'auto', padding: '0.5rem' }}>\r\n            <img src={MapaMundiLoading} alt=\"Mapa-mundi\" width=\"256\" />\r\n          </div>\r\n        </div>\r\n      }\r\n      {\r\n        !isLoading &&\r\n        \r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n            containerProps={{ className: 'grafico', style: { width: '95%', margin: 'auto', padding: '0.5rem' } }}\r\n          />\r\n        \r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CityChartAngular","import React, { useState, useEffect } from 'react'\r\nimport Highcharts from 'highcharts'\r\nimport HighChartsMore from 'highcharts/highcharts-more'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport MapaMundiLoading from '../assets/mapa-mundi.png'\r\n\r\nconst CityChartPolar = () => {\r\n  const [options, setOptions] = useState({})\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const chartLabel = ['Meio Ambiente', 'Energia', 'Governança', 'Saúde', 'Segurança', 'Empreendedorismo', 'Tecnologia e Inovação', 'Educação', 'Mobilidade', 'Urbanismo']\r\n    const randomData = chartLabel.map(label => {\r\n      return [label, Math.floor(Math.random() * 7) + 1]\r\n    })\r\n\r\n    setIsLoading(true)\r\n    HighChartsMore(Highcharts)\r\n    setOptions(\r\n      {\r\n        chart: {\r\n          polar: true\r\n        },\r\n      \r\n        title: {\r\n          text: 'Informações do Município'\r\n        },\r\n      \r\n        subtitle: {\r\n          text: 'Indicadores por área (vertical)'\r\n        },\r\n      \r\n        pane: {\r\n          startAngle: 0,\r\n          endAngle: 360\r\n        },\r\n      \r\n        xAxis: {\r\n          categories: chartLabel,\r\n          lineWidth: 1\r\n        },\r\n      \r\n        yAxis: {\r\n          visible: false,\r\n          min: 1,\r\n          max: 7\r\n        },\r\n      \r\n        plotOptions: {\r\n          series: {\r\n            pointStart: 0,\r\n            pointPlacement: 'off',\r\n            borderWidth: 1,\r\n            dataLabels: {\r\n              enabled: true\r\n            }\r\n          }\r\n        },\r\n\r\n        legend: {\r\n          enabled: false\r\n        },\r\n\r\n        credits: false,\r\n\r\n        exporting: {\r\n          enabled: false\r\n        },\r\n\r\n        tooltip: {\r\n          enabled: true\r\n        },\r\n      \r\n        series: [{\r\n          type: 'area',\r\n          name: 'Avaliação de Maturidade',\r\n          data: randomData\r\n        }]\r\n      }\r\n    )\r\n    setIsLoading(false)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {\r\n        isLoading &&\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div style={{ width: '95%', margin: 'auto', padding: '0.5rem' }}>\r\n            <img src={MapaMundiLoading} alt=\"Mapa-mundi\" width=\"256\" />\r\n          </div>\r\n        </div>\r\n      }\r\n      {\r\n        !isLoading &&\r\n        \r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n            containerProps={{ className: 'grafico', style: { width: '95%', margin: 'auto', padding: '0.5rem' } }}\r\n          />\r\n        \r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CityChartPolar","import React, { useCallback, useReducer } from 'react'\r\nimport CountryChart from './countryChart'\r\n//import StateChart from './stateChart'\r\nimport CityChartAngular from './cityChartAngular'\r\nimport CityChartPolar from './cityChartPolar'\r\n\r\nconst initialState = 'SP'\r\nfunction currentStateChange(state, action) {\r\n  switch(action.type) {\r\n    case 'setState':\r\n      return action.value\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst Charts = () => {\r\n  const [currentState, dispatch] = useReducer(currentStateChange, initialState)\r\n  console.log(\"U.F. selecionada: \" + currentState)\r\n\r\n  const handleStateChange = useCallback(state => {\r\n    dispatch({\r\n      type: 'setState',\r\n      value: state\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{backgroundColor: '#dbdbdb', width: '80%', margin: 'auto', padding: '0.5rem', display: 'flex', justifyContent: 'center', flexDirection: 'column', borderRadius: '1rem'}}>\r\n      <CountryChart onStateChanged={handleStateChange} />\r\n      {/*<StateChart currentState={currentState} />\r\n      <div style={{width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'space-between', flexDirection: 'row'}}>\r\n        <CityChartAngular />\r\n        <CityChartPolar />\r\n  </div>*/}\r\n      <CityChartAngular />\r\n      <CityChartPolar />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Charts","import React from 'react'\r\nimport './App.css'\r\nimport ChartHighCharts from './Charts'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Gráficos</h1>\r\n      <ChartHighCharts />\r\n      <h6>Gerado com HighCharts</h6>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/mapa-mundi.63354216.png\";"],"sourceRoot":""}